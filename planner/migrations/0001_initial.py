# Generated by Django 3.0 on 2019-12-05 15:48

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import planner.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=64)),
                ('first_name', models.CharField(max_length=64)),
                ('date_of_birth', models.DateField()),
                ('sex', models.CharField(choices=[('m', 'Male'), ('f', 'Female')], default='m', help_text='Select sex', max_length=1)),
                ('headshot', models.ImageField(blank=True, default='planner/athlete_headshots/no-img.jpg', upload_to='planner/athlete_headshots')),
            ],
            options={
                'ordering': ['last_name', 'first_name', 'date_of_birth'],
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment', models.CharField(choices=[('kb', 'Kettlebell'), ('db', 'Dumbbell'), ('bb', 'Barbell'), ('c2r', 'Rower'), ('aab', 'AAB'), ('c2s', 'Ski'), ('box', 'Box'), ('c2b', 'Airbike'), ('ghd', 'GHD'), ('sb', 'Sandbag'), ('jr', 'Jumprope')], help_text='Select equipment', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an exercise', max_length=64)),
                ('category', models.CharField(blank=True, choices=[('g', 'Gymnastics'), ('w', 'Weightlifting'), ('m', 'Monostructural')], help_text='Gymnastics, Weightlifting ...', max_length=1, null=True)),
                ('part', models.CharField(blank=True, choices=[('u', 'upper body'), ('l', 'lower body')], help_text='upper or lower body?', max_length=1, null=True)),
                ('equipment', models.ForeignKey(blank=True, help_text='Equipment used', null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Equipment')),
            ],
        ),
        migrations.CreateModel(
            name='MovementCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g. Squat or Pull Ups', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a track type', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('coaches_notes', models.TextField(blank=True, help_text='Enter coaches notes', max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, null=True)),
                ('benchmark', models.BooleanField(default=False, help_text='Will be stored for reuse', null=True)),
                ('scored_type', models.CharField(choices=[('emom', 'EMOM'), ('sets', 'SetsReps'), ('amrap', 'AMRAP'), ('coup', 'Couplet'), ('trip', 'Triplet'), ('chip', 'Chipper'), ('free', 'FreeTraining')], default='free', help_text='EMOM, AMRAP ...', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingPartInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rx', models.BooleanField(default=False, help_text='True if RX', null=True)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='planner.Athlete')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='planner.TrainingPart')),
            ],
        ),
        migrations.CreateModel(
            name='Warmup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('warmup', models.TextField(help_text='Warmup routine', max_length=1024)),
                ('additional', models.TextField(blank=True, default=False, help_text='Add stuff to preexisting routine', max_length=1024)),
                ('save', models.BooleanField(blank=True, default=False, help_text='Check for save')),
                ('equipment', models.ForeignKey(blank=True, help_text='Equipment used', null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Equipment')),
                ('track', models.ForeignKey(blank=True, help_text='Enter a track', null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Track')),
            ],
            options={
                'ordering': ['track', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Workout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('date', models.DateField(blank=True, default=django.utils.timezone.now)),
                ('cooldown', models.TextField(blank=True, help_text='Enter finnisher or cooldown, if necessary', max_length=1024, null=True)),
                ('coaches_notes', models.TextField(blank=True, help_text='Enter coaches notes, if necessary', max_length=1024, null=True)),
                ('track', models.ForeignKey(default=0, help_text='Select a category (WOD, Hyrox ...)', on_delete=django.db.models.deletion.PROTECT, to='planner.Track')),
                ('training', models.ManyToManyField(help_text='Enter training parts', to='planner.Training')),
                ('warmup', models.ForeignKey(blank=True, help_text='Enter warmup, if necessary', null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Warmup')),
            ],
            options={
                'ordering': ['date', 'track'],
            },
        ),
        migrations.CreateModel(
            name='AMRAPInstance',
            fields=[
                ('trainingpartinstance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPartInstance')),
                ('scored_rounds', models.PositiveIntegerField(blank=True, null=True)),
                ('scored_reps', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['scored_rounds', 'scored_reps', 'date'],
            },
            bases=('planner.trainingpartinstance',),
        ),
        migrations.CreateModel(
            name='EMOMInstance',
            fields=[
                ('trainingpartinstance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPartInstance')),
                ('scored_reps', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['scored_reps', 'date'],
            },
            bases=('planner.trainingpartinstance',),
        ),
        migrations.CreateModel(
            name='ForTimeInstance',
            fields=[
                ('trainingpartinstance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPartInstance')),
                ('finnished', models.BooleanField(default=True, help_text='True if finished in time', null=True)),
                ('scored_time', models.DurationField(blank=True, null=True)),
                ('scored_reps', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['scored_time', 'scored_reps', 'date'],
            },
            bases=('planner.trainingpartinstance',),
        ),
        migrations.CreateModel(
            name='FreeTraining',
            fields=[
                ('trainingpart_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPart')),
                ('description', models.TextField(help_text="This wont come op in analysation and can't be scored.", max_length=1024)),
            ],
            bases=('planner.trainingpart',),
        ),
        migrations.CreateModel(
            name='FreeTrainingInstance',
            fields=[
                ('trainingpartinstance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPartInstance')),
            ],
            options={
                'ordering': ['date'],
            },
            bases=('planner.trainingpartinstance',),
        ),
        migrations.CreateModel(
            name='SetsRepsInstance',
            fields=[
                ('trainingpartinstance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPartInstance')),
                ('finnished', models.BooleanField(default=True, help_text='True if finished in time', null=True)),
                ('scored_weight', models.FloatField(help_text='Weight in kg')),
                ('scored_sets', models.PositiveIntegerField(default=planner.models.SetsRepsInstance.get_default_sets)),
                ('scored_reps', models.PositiveIntegerField(default=planner.models.SetsRepsInstance.get_default_reps)),
            ],
            options={
                'ordering': ['scored_weight', 'scored_reps', 'scored_sets', 'date'],
            },
            bases=('planner.trainingpartinstance',),
        ),
        migrations.CreateModel(
            name='WorkoutInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, max_length=1024)),
                ('strain', models.PositiveIntegerField(blank=True, help_text='How hard was it (1-10)?', null=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='planner.Athlete')),
                ('workout', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='planner.Workout')),
            ],
        ),
        migrations.AddField(
            model_name='training',
            name='training',
            field=models.ForeignKey(blank=True, help_text='Enter training', null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.TrainingPart'),
        ),
        migrations.AddField(
            model_name='training',
            name='warmup',
            field=models.ForeignKey(blank=True, help_text='Enter warmup, if planned', null=True, on_delete=django.db.models.deletion.PROTECT, to='planner.Warmup'),
        ),
        migrations.CreateModel(
            name='ExerciseSceme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reps', models.IntegerField(blank=True, help_text='Select number of reps', null=True)),
                ('weight_male', models.FloatField(blank=True, help_text='Select weight in kg', null=True)),
                ('weight_female', models.FloatField(blank=True, help_text='Select weight in kg', null=True)),
                ('watt_male', models.IntegerField(blank=True, help_text='Select watt', null=True)),
                ('watt_female', models.IntegerField(blank=True, help_text='Select watt', null=True)),
                ('cals_male', models.IntegerField(blank=True, help_text='Select cals', null=True)),
                ('cals_female', models.IntegerField(blank=True, help_text='Select cals', null=True)),
                ('distance_male', models.IntegerField(blank=True, help_text='Select meters', null=True)),
                ('distance_female', models.IntegerField(blank=True, help_text='Select meters', null=True)),
                ('time', models.DurationField(blank=True, null=True)),
                ('percentage', models.PositiveIntegerField(blank=True, help_text='Select percentage of max effort or max weight', null=True)),
                ('tempo', models.CharField(blank=True, help_text='Four letters ebct e.g 41x0', max_length=4, null=True)),
                ('plus_x', models.IntegerField(blank=True, default=0, help_text='+X in each round')),
                ('exercise', models.ForeignKey(help_text='Select an exercise (Snatch, HSPU ...)', on_delete=django.db.models.deletion.PROTECT, to='planner.Exercise')),
            ],
            options={
                'ordering': ['exercise', 'reps', 'weight_male', 'cals_male', 'distance_male', 'watt_male', 'time', 'percentage', 'tempo'],
            },
        ),
        migrations.AddField(
            model_name='exercise',
            name='movement_category',
            field=models.ManyToManyField(to='planner.MovementCategory'),
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rounds', models.PositiveIntegerField(blank=True, default=1)),
                ('exercises', models.ManyToManyField(to='planner.ExerciseSceme')),
            ],
        ),
        migrations.CreateModel(
            name='SetsReps',
            fields=[
                ('trainingpart_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPart')),
                ('sets', models.IntegerField(blank=True, default=1, help_text='Select number of sets')),
                ('rest', models.DurationField(blank=True, help_text=' - rest ... between sets', null=True)),
                ('exercise', models.ForeignKey(help_text='Select an exercise (Snatch, HSPU ...)', on_delete=django.db.models.deletion.PROTECT, to='planner.Exercise')),
            ],
            bases=('planner.trainingpart',),
        ),
        migrations.CreateModel(
            name='ForTime',
            fields=[
                ('trainingpart_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPart')),
                ('time_cap', models.DurationField(blank=True, null=True)),
                ('buyin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fortime_buyin', to='planner.Block')),
                ('exercises', models.ManyToManyField(to='planner.Block')),
            ],
            bases=('planner.trainingpart',),
        ),
        migrations.CreateModel(
            name='EMOM',
            fields=[
                ('trainingpart_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPart')),
                ('seconds', models.IntegerField(blank=True, help_text='e...sos', null=True)),
                ('minutes', models.IntegerField(blank=True, help_text='e...mom', null=True)),
                ('duration', models.IntegerField(blank=True, help_text='Select duration in minutes', null=True)),
                ('exercises', models.ManyToManyField(to='planner.Block')),
            ],
            bases=('planner.trainingpart',),
        ),
        migrations.CreateModel(
            name='AMRAP',
            fields=[
                ('trainingpart_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='planner.TrainingPart')),
                ('time', models.DurationField(blank=True, help_text='Workout time', null=True)),
                ('buyin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='amrap_buyin', to='planner.Block')),
                ('exercises', models.ManyToManyField(to='planner.Block')),
            ],
            bases=('planner.trainingpart',),
        ),
    ]
